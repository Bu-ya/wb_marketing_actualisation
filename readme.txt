# README

## Описание

Этот скрипт предназначен для автоматического сбора и обновления данных с API Wildberries. Скрипт выполняет запросы к API в указанном временном диапазоне, сохраняет полученные данные в CSV файлы, а также ведет лог успехов и неудач. Основная функция запускает процесс в бесконечном цикле с заданным интервалом.

## Зависимости

Для работы скрипта необходимы следующие библиотеки:
- `os`
- `time`
- `requests`
- `pandas`
- `datetime`

Вы можете установить необходимые библиотеки с помощью pip:

```bash
pip install requests pandas
```

## Использование

1. Скачайте и распакуйте архив с проектом.
2. Откройте файл скрипта и замените `SECRET_KEY` на ваш реальный секретный ключ для доступа к API Wildberries.
3. Настройте параметры запуска в главной функции:
   - `start_date`: начальная дата для сбора данных в формате `YYYY-MM-DD`.
   - `limit`: лимит количества данных на запрос.
   - `company_name`: название папки, в которую будут сохраняться файлы с данными.
   - `interval`: интервал в секундах между запусками обновления данных (например, 3600 секунд = 1 час).

Пример использования:

```python
if __name__ == "__main__":
    SECRET_KEY = "ваш_секретный_ключ"
    start_date = datetime.strptime("2022-01-01", "%Y-%m-%d")
    limit = 100
    company_name = "company_name"
    interval = 3600  # Интервал в секундах (например, 1 час)

    main_loop(SECRET_KEY, start_date, limit, company_name, interval)
```

4. Запустите скрипт:

```bash
python имя_файла.py
```

## Функции

### fetch_data

Эта функция отправляет запрос к API Wildberries и сохраняет полученные данные в CSV файл.

**Аргументы:**
- `secret_key`: Секретный ключ для авторизации.
- `date_from`: Начальная дата периода в формате `YYYY-MM-DD`.
- `date_to`: Конечная дата периода в формате `YYYY-MM-DD`.
- `limit`: Лимит количества данных на запрос.
- `company_name`: Название папки для сохранения данных.

**Возвращает:**
- `True`, если данные успешно получены и сохранены.
- `False`, если произошла ошибка при получении данных.

### update_data

Эта функция обновляет данные за указанный период, пытаясь повторно получить данные для неудачных дат.

**Аргументы:**
- `secret_key`: Секретный ключ для авторизации.
- `start_date`: Начальная дата для обновления данных.
- `end_date`: Конечная дата для обновления данных.
- `limit`: Лимит количества данных на запрос.
- `company_name`: Название папки для сохранения данных.

### main_loop

Эта функция запускает процесс обновления данных в бесконечном цикле с заданным интервалом.

**Аргументы:**
- `secret_key`: Секретный ключ для авторизации.
- `start_date`: Начальная дата для обновления данных.
- `limit`: Лимит количества данных на запрос.
- `company_name`: Название папки для сохранения данных.
- `interval`: Интервал в секундах между запусками обновления данных.

## Логи

Скрипт сохраняет лог успехов и неудач обновления данных в файл `update_log.csv` в папке `./tables/{company_name}`.

## Обработка ошибок

Скрипт обрабатывает и выводит сообщения об ошибках, включая возможные ошибки при запросах к API и при сохранении данных в файлы. В случае возникновения исключений, программа продолжит работу после указанного интервала, если только не была остановлена пользователем.